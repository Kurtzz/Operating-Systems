Rodzaje sygnałów:
  SIGINT    T   Terminal interrupt signal.
  SIGQUIT   A   Terminal quit signal.
  SIGKILL   T   Kill (cannot be caught or ignored).
  SIGTSTP   S   Terminal stop signal.
  SIGSTOP   S   Stop executing (cannot be caught or ignored).
  SIGTERM   T   Termination signal.
  SIGSEGV   A   Invalid memory reference.
  SIGHUP    T   Hangup.
  SIGALARM  T   Alarm clock.
  SIGCHLD   I   Child process terminated, stopped,
  SIGUSR1   T   User-defined signal 1.
  SIGUSR2   T   User-defined signal 2.

The default actions are as follows:
  T   Abnormal termination of the process. The process is terminated
      with all the consequences of _exit() except that the status made available
      to wait() and waitpid() indicates abnormal termination by the specified signal.
  A   Abnormal termination of the process.
      [XSI] [Option Start] Additionally, implementation-defined abnormal
      termination actions, such as creation of a core file, may occur. [Option End]
  I   Ignore the signal.
  S   Stop the process.
  C   Continue the process, if it is stopped; otherwise, ignore the signal.

SYGNAŁY CZASU RZECZYWISTEGO
  This header shall also declare the macros SIGRTMIN and SIGRTMAX,
  which evaluate to integer expressions, and specify a range of signal numbers
  that are reserved for application use and for which the realtime signal behavior
  specified in this volume of IEEE Std 1003.1-2001 is supported. The signal numbers
  in this range do not overlap any of the signals specified in the following table.

  The range SIGRTMIN through SIGRTMAX inclusive shall include at least {RTSIG_MAX} signal numbers.

  It is implementation-defined whether realtime signal behavior is supported for other signals.

POLECENIE KILL
  kill - send a signal to a process or a group of proces
  +++ int kill(pid_t pid, int sig);

POLECENIA SYSTEMOWE
  int raise(int sig);
    send a signal to the caller

  int sigqueue(pid_t pid, int sig, const union sigval value);
    queue a signal and data to a process

  typedef void (*sighandler_t)(int);
  + sighandler_t signal(int signum, sighandler_t handler);
    ANSI C signal handling

  +++ int sigaction(int signum, const struct sigaction *act struct sigaction *oldact);
    examine and change a signal action
    ++ struct sigaction {
        void     (*sa_handler)(int);
        void     (*sa_sigaction)(int, siginfo_t *, void *);
        sigset_t   sa_mask;
        int        sa_flags;
        void     (*sa_restorer)(void);
    };

  int sigemptyset(sigset_t *set);
    - initializes the signal set given by set to empty, with all signals excluded from the set.
  + int sigfillset(sigset_t *set);
    - initializes set to full, including all signals.
  ++ int sigaddset(sigset_t *set, int signum);
  int sigdelset(sigset_t *set, int signum);
    - add and delete respectively signal signum from set.
  int sigismember(const sigset_t *set, int signum);
    - tests whether signum is a member of set.
    POSIX signal set operations.

  ++ int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
    examine and change blocked signals

  int sigpending(sigset_t *set);
    examine pending signals

  + int sigsuspend(const sigset_t *mask);
    wait for a signal

  + int pause(void);
    wait for signal
